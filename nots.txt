
// message.service.ts
// example of how to handle consuming and producing message in rabbit MQ

// message service to receive message from a queue and for sending message through another queue usind direct extchange 

// @RabbitSubscribe => used to subscribe to queue to consume message
// @RabbitRPC       => used to produce a message to queue using direct extchange type
// direct type means route message to dedicate queue ( one to one routing binding ) 
 
import { Injectable } from '@nestjs/common';
import { RabbitSubscribe } from '@nestjs-plus/rabbitmq';
import { RabbitRPC } from '@nestjs-plus/rabbitmq';
import { RabbitMQService } from '@nestjs-plus/rabbitmq';

@Injectable()
export class MessageService {
  constructor(private readonly rabbitmqService: RabbitMQService) {
    // Initialize your queues here if needed
    this.initializeQueues();
  }

  private async initializeQueues() {
    // Declare queues
    await this.rabbitmqService.queue('incoming_queue');
    await this.rabbitmqService.queue('outgoing_queue');
  }

  @RabbitSubscribe({
    exchange: 'direct_exchange',
    routingKey: 'incoming_queue',
  })
  public async handleMessage(message) {
    console.log(`Received message: ${message.content.toString()}`);
    // Process the received message

    // Acknowledge the message
    this.rabbitmqService.ack(message);
  }

  @RabbitRPC({
    exchange: 'direct_exchange',
    routingKey: 'outgoing_queue',
  })
  public async sendMessage(message: string): Promise<string> {
    console.log(`Sending message: ${message}`);
    // Perform any processing needed before sending the message
    return message;
  }
}


///
// app.module.ts
//


import { Module } from '@nestjs/common';
import { RabbitMQModule } from '@nestjs-plus/rabbitmq';
import { MessageService } from './message.service';

@Module({
  imports: [
    RabbitMQModule.forRoot({
      exchanges: [
        { name: 'direct_exchange', type: 'direct' },
      ],
      uri: 'amqp://localhost',
    }),
  ],
  controllers: [],
  providers: [MessageService],
})
export class AppModule {}

